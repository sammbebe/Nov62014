
/* MyCustomHandler.h
 * Declarations for class `MyCustomHandler'
 * Generated by the Eqela compiler
 */

#ifndef __SYMPATHY_LIBCUSTOM_MYCUSTOMHANDLER__
#define __SYMPATHY_LIBCUSTOM_MYCUSTOMHANDLER__

/* Dependencies for `MyCustomHandler' */

#include <com.eqela.libsympathy/HTTPRequestHandler.h>

/* Virtual method table for `MyCustomHandler' */

typedef struct _vtab_sympathy_libcustom_MyCustomHandler vtab_sympathy_libcustom_MyCustomHandler;
struct _vtab_sympathy_libcustom_MyCustomHandler {
    void* (*vtab_as)(void* self, const void* type);
    void (*destruct)(void* self);
    void (*on_logger_changed)(void* self);
    int (*is_log_debug)(void* self);
    signed int (*get_log_level)(void* self);
    void (*log_message)(void* self, void* o);
    void (*log_error)(void* self, void* o);
    void (*log_warning)(void* self, void* o);
    void (*log_debug)(void* self, void* o);
    int (*configure)(void* self, void* appdir, void* config);
    void (*get_configuration_descriptions)(void* self, void* v);
    void* (*start_timer)(void* self, signed int delay, void* handler, void* arg);
    void* (*start_task)(void* self, void* task, void* listener);
    void (*on_maintenance)(void* self);
    void (*on_configuration_changed)(void* self);
    int (*is_cors_enabled)(void* self);
    void* (*get_child)(void* self, void* id, void* req);
    void (*get)(void* self, void* req);
    void (*post)(void* self, void* req);
    void (*put)(void* self, void* req);
    void (*_delete)(void* self, void* req);
    void (*patch)(void* self, void* req);
    void* (*get_request_body_handler)(void* self, void* req);
    void* (*get_root_node)(void* self);
    void* (*create_not_allowed)(void* self, void* message);
    void* (*create_not_implemented)(void* self, void* message);
    void* (*create_invalid_request)(void* self, void* message);
    void* (*create_not_found)(void* self, void* message);
    void* (*get_body_handler)(void* self, void* req);
    void (*handle_session_request)(void* self, void* req);
    void (*start)(void* self);
    void (*stop)(void* self);
    void (*on_added)(void* self, void* server, void* path);
    void (*on_removed)(void* self, void* server);
    void (*on_refresh)(void* self);
    void (*clear_cache)(void* self);
    void (*handle_request)(void* self, void* req);
};

#include <windows.h>
/* Type declarations for `MyCustomHandler' */

extern "C" {
extern const void* type_sympathy_libcustom_MyCustomHandler;
}
typedef struct _sympathy_libcustom_MyCustomHandler sympathy_libcustom_MyCustomHandler;
struct _sympathy_libcustom_MyCustomHandler {
    com_eqela_libsympathy_HTTPRequestHandler base;
    void* priv;
};

/* Method prototypes for `MyCustomHandler' */

extern "C" {
void* new_sympathy_libcustom_MyCustomHandler();
#define ref_sympathy_libcustom_MyCustomHandler ref_com_eqela_libsympathy_HTTPRequestHandler
#define unref_sympathy_libcustom_MyCustomHandler unref_com_eqela_libsympathy_HTTPRequestHandler
#define vtab_as_sympathy_libcustom_MyCustomHandler vtab_as_com_eqela_libsympathy_HTTPRequestHandler
void sympathy_libcustom_MyCustomHandler_get(void* self, void* req);
void __do_sympathy_libcustom_MyCustomHandler_get(void* self, void* req);
void __do_construct_sympathy_libcustom_MyCustomHandler(void* self);
void __do_destruct_sympathy_libcustom_MyCustomHandler(void *self);
}

#endif
